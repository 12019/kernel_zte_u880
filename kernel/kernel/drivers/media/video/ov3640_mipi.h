/*
 * Basic window sizes.  These probably belong somewhere more globally
 * useful.
 */

#define QXGA_WIDTH	2048
#define QXGA_HEIGHT	1536
#define UXGA_WIDTH	1600
#define UXGA_HEIGHT     1200
#define XGA_WIDTH	1024
#define XGA_HEIGHT      768
#define D1_WIDTH	720
#define D1_HEIGHT      480
#define VGA_WIDTH	640
#define VGA_HEIGHT	480
#define QVGA_WIDTH	320
#define QVGA_HEIGHT	240
#define CIF_WIDTH	352
#define CIF_HEIGHT	288
#define QCIF_WIDTH	176
#define	QCIF_HEIGHT	144

/*
 * Our nominal (default) frame rate.
 */
#define OV3640_FRAME_RATE 30

/*
 * The 3640 sits on i2c with ID 0x42
 */
#define OV3640_I2C_ADDR 0x42

/* Registers */
#define REG_GAIN        0x00    /* Gain lower 8 bits (rest in vref) */
#define REG_BLUE        0x01    /* blue gain */
#define REG_RED         0x02    /* red gain */
#define REG_VREF        0x03    /* Pieces of GAIN, VSTART, VSTOP */
#define REG_COM1        0x04    /* Control 1 */
#define  COM1_CCIR656     0x40  /* CCIR656 enable */
#define REG_BAVE        0x05    /* U/B Average level */
#define REG_GbAVE       0x06    /* Y/Gb Average level */
#define REG_AECHH       0x07    /* AEC MS 5 bits */
#define REG_RAVE        0x08    /* V/R Average level */
#define REG_COM2        0x09    /* Control 2 */
#define  COM2_SSLEEP      0x10  /* Soft sleep mode */
#define REG_COM3        0x0c    /* Control 3 */
#define  COM3_SWAP        0x40    /* Byte swap */
#define  COM3_SCALEEN     0x08    /* Enable scaling */
#define  COM3_DCWEN       0x04    /* Enable downsamp/crop/window */
#define REG_COM4        0x0d    /* Control 4 */
#define REG_COM5        0x0e    /* All "reserved" */
#define REG_COM6        0x0f    /* Control 6 */
#define REG_AECH        0x10    /* More bits of AEC value */
#define   CLK_EXT         0x40    /* Use external clock directly */
#define   CLK_SCALE       0x3f    /* Mask for internal clock scale */
#define REG_COM7        0x12    /* Control 7 */
#define   COM7_RESET      0x80    /* Register reset */
#define   COM7_FMT_MASK   0x38
#define   COM7_FMT_VGA    0x00
#define   COM7_FMT_CIF    0x20    /* CIF format */
#define   COM7_FMT_QVGA   0x10    /* QVGA format */
#define   COM7_FMT_QCIF   0x08    /* QCIF format */
#define   COM7_RGB        0x04    /* bits 0 and 2 - RGB format */
#define   COM7_YUV        0x00    /* YUV */
#define   COM7_BAYER      0x01    /* Bayer format */
#define   COM7_PBAYER     0x05    /* "Processed bayer" */
#define REG_COM8        0x13    /* Control 8 */
#define   COM8_FASTAEC    0x80    /* Enable fast AGC/AEC */
#define   COM8_AECSTEP    0x40    /* Unlimited AEC step size */
#define   COM8_BFILT      0x20    /* Band filter enable */
#define   COM8_AGC        0x04    /* Auto gain enable */
#define   COM8_AWB        0x02    /* White balance enable */
#define   COM8_AEC        0x01    /* Auto exposure enable */
#define REG_COM9        0x14    /* Control 9  - gain ceiling */
#define REG_COM10       0x15    /* Control 10 */
#define   COM10_HSYNC     0x40    /* HSYNC instead of HREF */
#define   COM10_PCLK_HB   0x20    /* Suppress PCLK on horiz blank */
#define   COM10_HREF_REV  0x08    /* Reverse HREF */
#define   COM10_VS_LEAD   0x04    /* VSYNC on clock leading edge */
#define   COM10_VS_NEG    0x02    /* VSYNC negative */
#define   COM10_HS_NEG    0x01    /* HSYNC negative */
#define REG_HSTART      0x17    /* Horiz start high bits */
#define REG_HSTOP       0x18    /* Horiz stop high bits */
#define REG_VSTART      0x19    /* Vert start high bits */
#define REG_VSTOP       0x1a    /* Vert stop high bits */
#define REG_PSHFT       0x1b    /* Pixel delay after HREF */
#define REG_MIDH        0x1c    /* Manuf. ID high */
#define REG_MIDL        0x1d    /* Manuf. ID low */
#define REG_MVFP        0x1e    /* Mirror / vflip */
#define   MVFP_MIRROR     0x20    /* Mirror image */
#define   MVFP_FLIP       0x10    /* Vertical flip */

#define REG_AEW         0x24    /* AGC upper limit */
#define REG_AEB         0x25    /* AGC lower limit */
#define REG_VPT         0x26    /* AGC/AEC fast mode op region */
#define REG_HSYST       0x30    /* HSYNC rising edge delay */
#define REG_HSYEN       0x31    /* HSYNC falling edge delay */
#define REG_HREF        0x32    /* HREF pieces */
#define REG_TSLB        0x3a    /* lots of stuff */
#define   TSLB_YLAST      0x04    /* UYVY or VYUY - see com13 */
#define REG_COM11       0x3b    /* Control 11 */
#define   COM11_NIGHT     0x80    /* NIght mode enable */
#define   COM11_NMFR      0x60    /* Two bit NM frame rate */
#define   COM11_HZAUTO    0x10    /* Auto detect 50/60 Hz */
#define   COM11_50HZ      0x08    /* Manual 50Hz select */
#define   COM11_EXP       0x02
#define REG_COM12       0x3c    /* Control 12 */
#define   COM12_HREF      0x80    /* HREF always */
#define REG_COM13       0x3d    /* Control 13 */
#define   COM13_GAMMA     0x80    /* Gamma enable */
#define   COM13_UVSAT     0x40    /* UV saturation auto adjustment */
#define   COM13_UVSWAP    0x01    /* V before U - w/TSLB */
#define REG_COM14       0x3e    /* Control 14 */
#define   COM14_DCWEN     0x10    /* DCW/PCLK-scale enable */
#define REG_EDGE        0x3f    /* Edge enhancement factor */
#define REG_COM15       0x40    /* Control 15 */
#define   COM15_R10F0     0x00    /* Data range 10 to F0 */
#define   COM15_R01FE     0x80    /*            01 to FE */
#define   COM15_R00FF     0xc0    /*            00 to FF */
#define   COM15_RGB565    0x10    /* RGB565 output */
#define   COM15_RGB555    0x30    /* RGB555 output */
#define REG_COM16       0x41    /* Control 16 */
#define   COM16_AWBGAIN   0x08    /* AWB gain enable */
#define REG_COM17       0x42    /* Control 17 */
#define   COM17_AECWIN    0xc0    /* AEC window - must match COM4 */
#define   COM17_CBAR      0x08    /* DSP Color bar */

/*
 * This matrix defines how the colors are generated, must be
 * tweaked to adjust hue and saturation.
 *
 * Order: v-red, v-green, v-blue, u-red, u-green, u-blue
 *
 * They are nine-bit signed quantities, with the sign bit
 * stored in 0x58.  Sign for v-red is bit 0, and up from there.
 */
#define	REG_CMATRIX_BASE 0x4f
#define   CMATRIX_LEN 6
#define REG_CMATRIX_SIGN 0x58

#define REG_MVFP0   0x3023    /* Vertical flip */
#define REG_MVFP1   0x307c    /* Vertical flip */
#define REG_MVFP2   0x3090    /* Vertical flip */
#define REG_BRIGHT0	0x3302	/* Brightness */
#define REG_BRIGHT1 0x3355
#define REG_BRIGHT2 0x3354
#define REG_BRIGHT3 0x335e
#define REG_SAT0 0x3358
#define REG_SAT1 0x3359
#define REG_HUE0	0x3340
#define REG_HUE1 	0x3341
#define REG_HUE2 	0x3342
#define REG_HUE3 	0x3343
#define REG_HUE4	0x3344
#define REG_HUE5 	0x3345
#define REG_HUE6 	0x3346
#define REG_HUE7 	0x3347
#define REG_HUE8 	0x3348
#define REG_HUE9 	0x3349
#define REG_HUE10 	0x333f
#define REG_CONTRAS0	0x335c	/* Contrast control */
#define REG_CONTRAS1	0x335d	/* Contrast control */
#define REG_WB0	0x332b	/* white balance */
#define REG_WB1 0x33a7
#define REG_WB2 0x33a8
#define REG_WB3 0x33a9
#define REG_EXPOSURE0	0x3047	/* exporure */
#define REG_EXPOSURE1 	0x3018
#define REG_EXPOSURE2 	0x3019
#define REG_EXPOSURE3 	0x301a


#define REG_GFIX	0x69	/* Fix gain control */

#define REG_REG76	0x76	/* OV's name */
#define   R76_BLKPCOR	  0x80	  /* Black pixel correction enable */
#define   R76_WHTPCOR	  0x40	  /* White pixel correction enable */

#define REG_RGB444	0x8c	/* RGB 444 control */
#define   R444_ENABLE	  0x02	  /* Turn on RGB444, overrides 5x5 */
#define   R444_RGBX	  0x01	  /* Empty nibble at end */

#define REG_HAECC1	0x9f	/* Hist AEC/AGC control 1 */
#define REG_HAECC2	0xa0	/* Hist AEC/AGC control 2 */

#define REG_BD50MAX	0xa5	/* 50hz banding step limit */
#define REG_HAECC3	0xa6	/* Hist AEC/AGC control 3 */
#define REG_HAECC4	0xa7	/* Hist AEC/AGC control 4 */
#define REG_HAECC5	0xa8	/* Hist AEC/AGC control 5 */
#define REG_HAECC6	0xa9	/* Hist AEC/AGC control 6 */
#define REG_HAECC7	0xaa	/* Hist AEC/AGC control 7 */
#define REG_BD60MAX	0xab	/* 60hz banding step limit */


/*for OV3640 porting*/
#define REG_CLKRC	0x3011
#define REG_PIDH        0x300a
#define REG_PIDL        0x300b
#define REG_SYS		0x3012
#define SYS_RESET	0x80
/*
 * Information we maintain about a known sensor.
 */
struct ov3640_format_struct;  /* coming later */
struct ov3640_info {
	struct ov3640_format_struct *fmt;  /* Current format */
	unsigned char sat;		/* Saturation value */
	int hue;			/* Hue value */
};

/*
 * The default register settings, as obtained from OmniVision.  There
 * is really no making sense of most of these - lots of "reserved" values
 * and such.
 *
 * These settings give VGA YUYV.
 */

struct regval_list {
	u16 reg_num;
	unsigned char value;
};

/*
 * Here we'll try to encapsulate the changes for just the output
 * video format.
 *
 * RGB656 and YUV422 come from OV; RGB444 is homebrewed.
 *
 * IMPORTANT RULE: the first entry must be for COM7, see ov3640_s_fmt for why.
 */

/*TODO - ov3640_fmt_yuv422_qxga can't work. configuration should be correct*/
//mipi supported // 10 fps
#if 0
static struct regval_list ov3640_fmt_yuv422_qxga[] = {
	{0x304d, 0x45}, /*Rev2A */
	{0x3087, 0x16}, /*Rev2A */
	{0x30aa, 0x45}, /*Rev2A */
	{0x30b0, 0xff}, /*Rev2A */
	{0x30b1, 0xff},
	{0x30b2, 0x10},
	{0x30d7, 0x10}, /*Rev2A */

	{0x309e, 0x00}, /*terry */
	{0x3602, 0x26}, /*2a ;SOL/EOL on */
	{0x3603, 0x4D}, /*ecc  */
	{0x364c, 0x04}, /*ecc  */
	{0x360c, 0x12}, /*virtual channel 0 */
	{0x361e, 0x00},
	{0x361f, 0x11}, /*pclk_period, terry */
	{0x3633, 0x32}, /*terry, increase hs_prepare */
	{0x3629, 0x3c}, /*terry, increase clk_prepare */
	{0x300e, 0x39}, /*7.5fps terry */
	{0x300f, 0xa1}, /*terry */

	{0x3010, 0xa1}, /*high mipi spd, 81 ;terry */ //ENABLE_TWO_LANES
	//0x3010, 0x}a2, /*low down mipi spd, 81 ;terry */ //ENABLE_TWO_LANES

	{0x3011, 0x01},
	{0x304c, 0x81}, /*Rev2A */

	{0x3018, 0x38}, /*aec */
	{0x3019, 0x30}, /*06142007 */
	{0x301a, 0x61}, /*06142007 */
	{0x307d, 0x00}, /*aec isp 06142007 */
	{0x3087, 0x02}, /*06142007 */
	{0x3082, 0x20}, /*06142007 */

	{0x303c, 0x08}, /*aec weight */
	{0x303d, 0x18},
	{0x303e, 0x06},
	{0x303F, 0x0c},
	{0x3030, 0x62},   
	{0x3031, 0x26},
	{0x3032, 0xe6},
	{0x3033, 0x6e},
	{0x3034, 0xea},
	{0x3035, 0xae},
	{0x3036, 0xa6},
	{0x3037, 0x6a},

	{0x3015, 0x12}, /*07182007 8x gain, auto 1/2 */
	{0x3014, 0x04}, /*06142007 auto frame off */
	{0x3013, 0xf7}, /*07182007 */

	{0x3104, 0x02},
	{0x3105, 0xfd},
	{0x3106, 0x00},
	{0x3107, 0xff},
	{0x3308, 0xa5},
	{0x3316, 0xff},
	{0x3317, 0x00},
	{0x3087, 0x02},
	{0x3082, 0x20},
	{0x3300, 0x13},
	{0x3301, 0xd6},
	{0x3302, 0xef},

	{0x30b8, 0x20}, /*10 */
	{0x30b9, 0x17}, /*18 */
	{0x30ba, 0x04}, /*00 */
	{0x30bb, 0x08}, /*1f */

	{0x3100, 0x02}, /*YUV */ /*Format */
	{0x3304, 0x00},
	{0x3400, 0x00},
	{0x3404, 0x02}, /*terry - output format: YUV422PACKED(UYVY)*/

	{0x3020, 0x01}, /*QXGA *//*Size */
	{0x3021, 0x1d},
	{0x3022, 0x00},
	{0x3023, 0x0a},
	{0x3024, 0x08},
	{0x3025, 0x18},
	{0x3026, 0x06},
	{0x3027, 0x0c},
	{0x335f, 0x68},
	{0x3360, 0x18},
	{0x3361, 0x0c},
	{0x3362, 0x68},
	{0x3363, 0x08},
	{0x3364, 0x04},
	{0x3403, 0x42},
	{0x3088, 0x08},
	{0x3089, 0x00},
	{0x308a, 0x06},
	{0x308b, 0x00},

	{0x3507, 0x06},
	{0x350a, 0x4f},
	{0x3600, 0xc4},
	{0xffff, 0xff},
};
#endif
static struct regval_list ov3640_fmt_yuv422_d1[] = {
    {0x3012, 0x80},  
    {0x304d, 0x45},  /*Rev2A */
    {0x3087, 0x16},  /*Rev2A */
    {0x30aa, 0x45},  /*Rev2A */
    {0x30b0, 0xff},  /*Rev2A */
    {0x30b1, 0xff}, 
    {0x30b2, 0x10}, 
    {0x30d7, 0x10},  /*Rev2A */

    {0x309e, 0x00},  /*terry */
    {0x3602, 0x26},  /*2a ;SOL/EOL on */
    {0x3603, 0x4D},  /*ecc    */
    {0x364c, 0x04},  /*ecc    */
    {0x360c, 0x12},  /*virtual channel 0 */
    {0x361e, 0x00}, 
    {0x361f, 0x11},  /*pclk_period, terry */
    {0x3633, 0x32},  /*terry, increase hs_prepare */
    {0x3629, 0x3c},  /*terry, increase clk_prepare */
    {0x300e, 0x33},  /*15fps terry */
    {0x300f, 0xa1},  /*terry */

    {0x3010, 0xa2},  /*mipi spd, 81 ;terry */

    {0x3011, 0x01},
    {0x304c, 0x82},  /*Rev2A */

    {0x3018, 0x48},  /*aec *//*0x3018~0x301a, exposure*/
    {0x3019, 0x40},  /*06142007 */
    {0x301a, 0x81},  /*06142007 */
    {0x307d, 0x00},  /*aec isp 06142007 */
    {0x3087, 0x02},  /*06142007 */
    {0x3082, 0x20},  /*06142007 */

    {0x303c, 0x08},  /*aec weight */
    {0x303d, 0x18}, 
    {0x303e, 0x06}, 
    {0x303F, 0x0c}, 
    {0x3030, 0x62}, 
    {0x3031, 0x26}, 
    {0x3032, 0xe6}, 
    {0x3033, 0x6e}, 
    {0x3034, 0xea}, 
    {0x3035, 0xae}, 
    {0x3036, 0xa6}, 
    {0x3037, 0x6a}, 

    {0x3015, 0x12},  /*07182007 8x gain, auto 1/2 */
    {0x3014, 0x04},  /*06142007 auto frame off */
    {0x3013, 0xf7},  /*07182007 */

    {0x3104, 0x02}, 
    {0x3105, 0xfd}, 
    {0x3106, 0x00}, 
    {0x3107, 0xff}, 
    {0x3308, 0xa5}, 
    {0x3316, 0xff}, 
    {0x3317, 0x00}, 
    {0x3087, 0x02}, 
    {0x3082, 0x20}, 
    {0x3300, 0x13}, 
    {0x3301, 0xd6}, 
    {0x3302, 0xef}, 

    {0x30b8, 0x20},  /*10 */
    {0x30b9, 0x17},  /*18 */
    {0x30ba, 0x04},  /*00 */
    {0x30bb, 0x08},  /*1f */

    {0x3100, 0x02},  /*YUV */
    {0x3304, 0x00}, 
    {0x3400, 0x00}, 
    {0x3404, 0x02},  /*terry - output format: YUV422PACKED(UYVY)*/

    {0x3302, 0xef},  /* */
    {0x3020, 0x01}, 
    {0x3021, 0x1d}, 
    {0x3022, 0x00}, 
    {0x3023, 0x0a}, 
    {0x3024, 0x08}, 
    {0x3025, 0x18}, 
    {0x3026, 0x06}, 
    {0x3027, 0x0c}, 
    {0x335f, 0x68}, 
    {0x3360, 0x18}, 
    {0x3361, 0x0c}, 
    {0x3362, 0x34}, 
    {0x3363, 0x08}, 
    {0x3364, 0x06}, 
    {0x3403, 0x42}, 
    {0x3088, 0x02},
    {0x3089, 0xD0}, 
    {0x308a, 0x01}, 
    {0x308b, 0xE0}, 

    {0x3507, 0x06}, 
    {0x350a, 0x4f}, 
    {0x3600, 0xc4}, 
    //
    //gamma
    {0x331b, 0x08 },
    {0x331c, 0x16 },
    {0x331d, 0x2d },
    {0x331e, 0x54 },
    {0x331f, 0x66 },
    {0x3320, 0x73 },
    {0x3321, 0x80 },
    {0x3322, 0x8c },
    {0x3323, 0x95 },
    {0x3324, 0x9d },
    {0x3325, 0xac },
    {0x3326, 0xb8 },
    {0x3327, 0xcc },
    {0x3328, 0xdd },
    {0x3329, 0xee },
    {0x332a, 0x1d },
    //color matrix
    {0x3340, 0x20 },
    {0x3341, 0x64 },
    {0x3342, 0x08 },
    {0x3343, 0x30 },
    {0x3344, 0x90 },
    {0x3345, 0xc0 },
    {0x3346, 0xa0 },
    {0x3347, 0x98 },
    {0x3348, 0x08 },
    {0x3349, 0x98 },
    {0x333f, 0x02 },


    {0x3012, 0x10},
    {0x3023, 0x06},
    {0x3026, 0x03},
    {0x3027, 0x04},
    {0x302a, 0x03},
    {0x302b, 0x10},
    {0x3075, 0x24},
    {0x300d, 0x01},
    {0x30d7, 0x80},
    {0x3069, 0x04},
    {0x303e, 0x00},
    {0x303f, 0xc0},
    {0x3302, 0xef},
    {0x335f, 0x34},
    {0x3360, 0x0c},
    {0x3361, 0x04},
    {0x3362, 0x34},
    {0x3363, 0x08},
    {0x3364, 0x04},
    {0x3403, 0x42},
    {0x3088, 0x02},
    {0x3089, 0xD0},
    {0x308a, 0x01},
    {0x308b, 0xE0},

    {0xffff, 0x00ff}        
};

static struct regval_list ov3640_fmt_yuv422_vga[] = {

	{0x3012, 0x80},
	{0x304d, 0x45}, // /*Rev2A */
	{0x3087, 0x16}, // /*Rev2A */
	{0x30aa, 0x45}, // /*Rev2A */
	{0x30b0, 0xff}, // /*Rev2A */
	{0x30b1, 0xff}, //
	{0x30b2, 0x10}, //
	{0x30d7, 0x10}, // /*Rev2A */

	{0x309e, 0x00}, // /*terry */
	{0x3602, 0x26}, // /*2a ;SOL/EOL on */
	{0x3603, 0x4D}, // /*ecc	*/
	{0x364c, 0x04}, // /*ecc	*/
	{0x360c, 0x12}, // /*virtual channel 0 */
	{0x361e, 0x00}, //
	{0x361f, 0x11}, // /*pclk_period, terry */
	{0x3633, 0x32}, // /*terry, increase hs_prepare */
	{0x3629, 0x3c}, // /*terry, increase clk_prepare */
	{0x300e, 0x39}, // /*15fps terry */
	{0x300f, 0xa1}, // /*terry */

	{0x3010, 0xa2}, // /*mipi spd, 81 ;terry */

	{0x3011, 0x00}, //
	{0x304c, 0x84}, // /*Rev2A */

	{0x3018, 0x48}, // /*aec *//*0x3018~0x301a, exposure*/
	{0x3019, 0x40}, // /*06142007 */
	{0x301a, 0x81}, // /*06142007 */
	{0x307d, 0x00}, // /*aec isp 06142007 */
	{0x3087, 0x02}, // /*06142007 */
	{0x3082, 0x20}, // /*06142007 */

	{0x303c, 0x08}, // /*aec weight */
	{0x303d, 0x18}, //
	{0x303e, 0x06}, //
	{0x303F, 0x0c}, //
	{0x3030, 0x62}, //
	{0x3031, 0x26}, //
	{0x3032, 0xe6}, //
	{0x3033, 0x6e}, //
	{0x3034, 0xea}, //
	{0x3035, 0xae}, //
	{0x3036, 0xa6}, //
	{0x3037, 0x6a}, //

	{0x3015, 0x12}, // /*07182007 8x gain, auto 1/2 */
	{0x3014, 0x04}, // /*06142007 auto frame off */
	{0x3013, 0xf7}, // /*07182007 */

	{0x3104, 0x02}, //
	{0x3105, 0xfd}, //
	{0x3106, 0x00}, //
	{0x3107, 0xff}, //
	{0x3308, 0xa5}, //
	{0x3316, 0xff}, //
	{0x3317, 0x00}, //
	{0x3087, 0x02}, //
	{0x3082, 0x20}, //
	{0x3300, 0x13}, //
	{0x3301, 0xd6}, //
	{0x3302, 0xef}, //

	{0x30b8, 0x20}, // /*10 */
	{0x30b9, 0x17}, // /*18 */
	{0x30ba, 0x04}, // /*00 */
	{0x30bb, 0x08}, // /*1f */

	{0x3100, 0x02}, // /*YUV */
	{0x3304, 0x00}, //
	{0x3400, 0x00}, //
	{0x3404, 0x02}, // /*terry - output format: YUV422PACKED(UYVY)*/

	{0x3302, 0xef}, // /* */
	{0x3020, 0x01}, //
	{0x3021, 0x1d}, //
	{0x3022, 0x00}, //
	{0x3023, 0x0a}, //
	{0x3024, 0x08}, //
	{0x3025, 0x18}, //
	{0x3026, 0x06}, //
	{0x3027, 0x0c}, //
	{0x335f, 0x68}, //
	{0x3360, 0x18}, //
	{0x3361, 0x0c}, //
	{0x3362, 0x12}, //
	{0x3363, 0x88}, //
	{0x3364, 0xe4}, //
	{0x3403, 0x42}, //
	{0x3088, 0x02}, //
	{0x3089, 0x80}, //
	{0x308a, 0x01}, //
	{0x308b, 0xe0}, //

	{0x3507, 0x06}, //
	{0x350a, 0x4f}, //
	{0x3600, 0xc4}, //

	//gamma
	{0x331b, 0x08 },
	{0x331c, 0x16 },
	{0x331d, 0x2d },
	{0x331e, 0x54 },
	{0x331f, 0x66 },
	{0x3320, 0x73 },
	{0x3321, 0x80 },
	{0x3322, 0x8c },
	{0x3323, 0x95 },
	{0x3324, 0x9d },
	{0x3325, 0xac },
	{0x3326, 0xb8 },
	{0x3327, 0xcc },
	{0x3328, 0xdd },
	{0x3329, 0xee },
	{0x332a, 0x1d },
	//color matrix
	{0x3340, 0x20 },
	{0x3341, 0x64 },
	{0x3342, 0x08 },
	{0x3343, 0x30 },
	{0x3344, 0x90 },
	{0x3345, 0xc0 },
	{0x3346, 0xa0 },
	{0x3347, 0x98 },
	{0x3348, 0x08 },
	{0x3349, 0x98 },
	{0x333f, 0x02 },

	{0xffff, 0x00ff}        /* End of file marker (0xFFFF)*/
};

static struct regval_list ov3640_fmt_yuv422_qvga[] = {
	{0x3002, 0x06 }, {0x3003, 0x1F }, {0x3001, 0x12 }, {0x304d, 0x45 },
	{0x30aa, 0x45 }, {0x30B0, 0xff }, {0x30B1, 0xff }, {0x30B2, 0x10 },
	{0x30d7, 0x10 }, {0x3047, 0x00 }, {0x3018, 0x60 }, {0x3019, 0x58 },
	{0x301A, 0xa1 }, {0x3087, 0x02 }, {0x3082, 0x20 }, {0x303C, 0x08 },
	{0x303d, 0x18 }, {0x303e, 0x06 },
	{0x303f, 0x0c }, {0x3030, 0x62 }, {0x3031, 0x26 }, {0x3032, 0xe6 },
	{0x3033, 0x6e }, {0x3034, 0xea }, {0x3035, 0xae }, {0x3036, 0xa6 },
	{0x3037, 0x6a }, {0x3015, 0x12 }, {0x3013, 0xfd }, {0x3104, 0x02 },
	{0x3105, 0xfd }, {0x3106, 0x00 }, {0x3107, 0xff }, {0x3308, 0xa5 },
	{0x3316, 0xff }, {0x3317, 0x00 }, {0x3087, 0x02 }, {0x3082, 0x20 },
	{0x3300, 0x13 }, {0x3301, 0xd6 }, {0x3302, 0xef }, {0x30B8, 0x20 },
	{0x30B9, 0x17 }, {0x30BA, 0x04 }, {0x30BB, 0x08 }, {0x3507, 0x06 },
	{0x350a, 0x4f }, {0x3600, 0xc4 }, {0x332B, 0x00 }, {0x332D, 0x45 },
	{0x332D, 0x60 }, {0x332F, 0x03 },
	{0x3100, 0x02 }, {0x3304, 0xfc }, {0x3400, 0x00 }, {0x3404, 0x02 }, /* YUV422 */
	{0x3601, 0x01 }, {0x302a, 0x06 }, {0x302b, 0x20 },
	{0x300E, 0x32 }, {0x300F, 0x21 }, {0x3010, 0x21 }, {0x3011, 0x01 }, /* QXGA PLL setting*/
	{0x304c, 0x81 },
	{0x3602, 0x22 }, {0x361E, 0x00 }, {0x3622, 0x18 }, {0x3623, 0x69 }, /* CSI setting */
	{0x3626, 0x00 }, {0x3627, 0xf0 }, {0x3628, 0x00 }, {0x3629, 0x26 },
	{0x362A, 0x00 }, {0x362B, 0x5f }, {0x362C, 0xd0 }, {0x362D, 0x3c },
	{0x3632, 0x10 }, {0x3633, 0x28 }, {0x3603, 0x4d }, {0x364C, 0x04 },
	{0x309e, 0x00 },
	{0x3020, 0x01 }, {0x3021, 0x1d }, {0x3022, 0x00 }, {0x3023, 0x0a }, /* crop window setting*/
	{0x3024, 0x08 }, {0x3025, 0x18 }, {0x3026, 0x06 }, {0x3027, 0x0c },
	{0x335f, 0x68 }, {0x3360, 0x18 }, {0x3361, 0x0c },
	{0x3362, 0x01 }, {0x3363, 0x48 }, {0x3364, 0xf4 }, {0x3403, 0x42 },  /* QVGA */
	{0x3088, 0x01 }, {0x3089, 0x40 }, {0x308a, 0x00 }, {0x308b, 0xf0 },
	{0x3355, 0x04 }, {0x3354, 0x01 }, {0x335e, 0x28 },      /* brightness */
	{0x3355, 0x04 }, {0x335c, 0x20 }, {0x335d, 0x20 },      /* contrast */
	{0xffff, 0xff },
};

/*TODO - ov3640_fmt_yuv422_qcif can't work*/
static struct regval_list ov3640_fmt_yuv422_qcif[] = {
	//QVGA
	{0x3012, 0x80}, //
	{0x304d, 0x45}, // /*Rev2A */
	{0x3087, 0x16}, // /*Rev2A */
	{0x30aa, 0x45}, // /*Rev2A */
	{0x30b0, 0xff}, // /*Rev2A */
	{0x30b1, 0xff}, //
	{0x30b2, 0x10}, //
	{0x30d7, 0x10}, // /*Rev2A */

	{0x309e, 0x00}, // /*terry */
	{0x3602, 0x26}, // /*2a ;SOL/EOL on */
	{0x3603, 0x4D}, // /*ecc  */
	{0x364c, 0x04}, // /*ecc  */
	{0x360c, 0x12}, // /*virtual channel 0 */
	{0x361e, 0x00}, //
	{0x361f, 0x11}, // /*pclk_period, terry */
	{0x3633, 0x32}, // /*terry, increase hs_prepare */
	{0x3629, 0x3c}, // /*terry, increase clk_prepare */
	{0x300e, 0x39}, // /*15fps terry */
	{0x300f, 0xa1}, // /*terry */

	{0x3010, 0xa2}, // /*mipi spd, 81 ;terry */

	{0x3011, 0x00}, //
	{0x304c, 0x84}, // /*Rev2A */

	{0x3018, 0x38}, // /*aec */
	{0x3019, 0x30}, // /*06142007 */
	{0x301a, 0x61}, // /*06142007 */
	{0x307d, 0x00}, // /*aec isp 06142007 */
	{0x3087, 0x02}, // /*06142007 */
	{0x3082, 0x20}, // /*06142007 */

	{0x303c, 0x08}, // /*aec weight */
	{0x303d, 0x18}, //
	{0x303e, 0x06}, //
	{0x303F, 0x0c}, //
	{0x3030, 0x62}, //
	{0x3031, 0x26}, //
	{0x3032, 0xe6}, //
	{0x3033, 0x6e}, //
	{0x3034, 0xea}, //
	{0x3035, 0xae}, //
	{0x3036, 0xa6}, //
	{0x3037, 0x6a}, //

	{0x3015, 0x12}, // /*07182007 8x gain, auto 1/2 */
	{0x3014, 0x04}, // /*06142007 auto frame off */
	{0x3013, 0xf7}, // /*07182007 */

	{0x3104, 0x02}, //
	{0x3105, 0xfd}, //
	{0x3106, 0x00}, //
	{0x3107, 0xff}, //
	{0x3308, 0xa5}, //
	{0x3316, 0xff}, //
	{0x3317, 0x00}, //
	{0x3087, 0x02}, //
	{0x3082, 0x20}, //
	{0x3300, 0x13}, //
	{0x3301, 0xd6}, //
	{0x3302, 0xef}, //

	{0x30b8, 0x20}, // /*10 */
	{0x30b9, 0x17}, // /*18 */
	{0x30ba, 0x04}, // /*00 */
	{0x30bb, 0x08}, // /*1f */

	{0x3100, 0x02}, // /*YUV */
	{0x3304, 0x00}, //
	{0x3400, 0x00}, //
	{0x3404, 0x02}, // /*terry - output format: YUV422PACKED(UYVY)*/

	{0x3302, 0xef}, // /* */
	{0x3020, 0x01}, //
	{0x3021, 0x1d}, //
	{0x3022, 0x00}, //
	{0x3023, 0x0a}, //
	{0x3024, 0x08}, //
	{0x3025, 0x18}, //
	{0x3026, 0x06}, //
	{0x3027, 0x0c}, //

	{0x335f, 0x68}, //
	{0x3360, 0x18}, //
	{0x3361, 0x0c}, //

	{0x3362, 0x00}, // QVGA
	{0x3363, 0xb8}, // QVGA
	{0x3364, 0x94}, // QVGA

	{0x3403, 0x42}, // QVGA

	{0x3088, 0x00}, // QVGA
	{0x3089, 0xb0}, // QVGA
	{0x308a, 0x00}, // QVGA
	{0x308b, 0x90}, // QVGA

	{0x3507, 0x06}, //
	{0x350a, 0x4f}, //
	{0x3600, 0xc4}, //
	{0xffff, 0xff},

};

static struct regval_list ov3640_fmt_jpeg_vga[] = {
	{0x3002, 0x06 }, {0x3003, 0x1F }, {0x3001, 0x12 }, {0x304d, 0x45 },
	{0x30aa, 0x45 }, {0x30B0, 0xff }, {0x30B1, 0xff }, {0x30B2, 0x10 },
	{0x30d7, 0x10 }, {0x3047, 0x00 }, {0x3018, 0x60 }, {0x3019, 0x58 },
	{0x301A, 0xa1 }, {0x303C, 0x08 }, {0x303d, 0x18 }, {0x303e, 0x06 },
	{0x303f, 0x0c }, {0x3030, 0x62 }, {0x3031, 0x26 }, {0x3032, 0xe6 },
	{0x3033, 0x6e }, {0x3034, 0xea }, {0x3035, 0xae }, {0x3036, 0xa6 },
	{0x3037, 0x6a }, {0x3015, 0x12 }, {0x3013, 0xfd }, {0x3104, 0x02 },
	{0x3105, 0xfd }, {0x3106, 0x00 }, {0x3107, 0xff }, {0x3308, 0xa5 },
	{0x3316, 0xff }, {0x3317, 0x00 }, {0x3087, 0x02 }, {0x3082, 0x20 },
	{0x3300, 0x13 }, {0x3301, 0xd6 }, {0x3302, 0xef }, {0x30B8, 0x20 },
	{0x30B9, 0x17 }, {0x30BA, 0x04 }, {0x30BB, 0x08 }, {0x3507, 0x06 },
	{0x350a, 0x4f }, {0x3600, 0xc4 }, {0x332B, 0x00 }, {0x332D, 0x45 },
	{0x332D, 0x60 }, {0x332F, 0x03 },
	{0x3100, 0x32 }, {0x3304, 0xfc }, {0x3404, 0x22 }, {0x3500, 0x00 }, /* JPEG */
	{0x3610, 0x0c },
	{0x300E, 0x32 }, {0x300F, 0x21 }, {0x3010, 0x21 }, {0x3011, 0x01 }, /* QXGA PLL setting*/
	{0x304c, 0x81 },
	{0x3602, 0x22 }, {0x361E, 0x00 }, {0x3622, 0x18 }, {0x3623, 0x69 }, /* CSI setting */
	{0x3626, 0x00 }, {0x3627, 0xf0 }, {0x3628, 0x00 }, {0x3629, 0x26 },
	{0x362A, 0x00 }, {0x362B, 0x5f }, {0x362C, 0xd0 }, {0x362D, 0x3c },
	{0x3632, 0x10 }, {0x3633, 0x28 }, {0x3603, 0x4d }, {0x364C, 0x04 },
	{0x309e, 0x00 },
	{0x3020, 0x01 }, {0x3021, 0x1d }, {0x3022, 0x00 }, {0x3023, 0x0a }, /* crop window setting*/
	{0x3024, 0x08 }, {0x3025, 0x18 }, {0x3026, 0x06 }, {0x3027, 0x0c },
	{0x335f, 0x68 }, {0x3360, 0x18 }, {0x3361, 0x0c },
	{0x3362, 0x12 }, {0x3363, 0x88 }, {0x3364, 0xe4 }, {0x3403, 0x42 },  /* VGA */
	{0x3088, 0x02 }, {0x3089, 0x80 }, {0x308a, 0x01 }, {0x308b, 0xe0 },

	{0x3355, 0x04 }, {0x3354, 0x01 }, {0x335e, 0x28 },      /* brightness */
	{0x3355, 0x04 }, {0x335c, 0x20 }, {0x335d, 0x20 },      /* contrast */
	{0xffff, 0x00ff}        /* End of file marker (0xFFFF)*/

};

/*TODO - ov3640_fmt_jpeg_qxga can't work*/
static struct regval_list ov3640_fmt_jpeg_qxga[] = {
	//2048x1536 JPG@15fps

	{0x3012, 0x80},
	{0x304d, 0x45}, //Rev2A
	{0x30a7, 0x5e}, //Rev2C mi
	{0x3087, 0x16}, //Rev2A
	{0x309C, 0x1a}, //Rev2C 
	{0x30a2, 0xe4}, //Rev2C 
	{0x30aa, 0x42}, //Rev2C 
	{0x30b0, 0xff}, //Rev2A
	{0x30b1, 0xff},
	{0x30b2, 0x10},
	{0x30d7, 0x10},//Rev2A

	{0x309e, 0x00}, //terry
	{0x3602, 0x26}, //2a //SOL/EOL on
	{0x3603, 0x4D}, //ecc 
	{0x364c, 0x04}, //ecc 
	{0x360c, 0x12}, //virtual channel 0
	{0x361e, 0x00},
	{0x361f, 0x11}, //pclk_period, terry
	{0x3633, 0x32}, //terry, increase hs_prepare
	{0x3629, 0x3c}, //terry, increase clk_prepare
	{0x300e, 0x39}, //15fps terry
	{0x300f, 0xa1}, //terry
	{0x3010, 0xa2}, //high mipi spd, 2lane
	{0x3011, 0x00},
	{0x304c, 0x84}, //Rev2A

	{0x30d9, 0x0d}, //Rev2C
	{0x30db, 0x08}, //Rev2C
	{0x3016, 0x82}, //Rev2C

	{0x3018, 0x38}, //aec
	{0x3019, 0x30}, //06142007
	{0x301a, 0x61}, //06142007
	{0x307d, 0x00}, //aec isp 06142007
	{0x3087, 0x02}, //06142007
	{0x3082, 0x20}, //06142007

	{0x303c, 0x08}, //aec weight
	{0x303d, 0x18},
	{0x303e, 0x06},
	{0x303F, 0x0c},
	{0x3030, 0x62},	
	{0x3031, 0x26},
	{0x3032, 0xe6},
	{0x3033, 0x6e},
	{0x3034, 0xea},
	{0x3035, 0xae},
	{0x3036, 0xa6},
	{0x3037, 0x6a},

	{0x3015, 0x12}, //07182007 8x gain, auto 1/2
	{0x3014, 0x04}, //06142007 auto frame off
	{0x3013, 0xf7}, //07182007

	{0x3104, 0x02},
	{0x3105, 0xfd},
	{0x3106, 0x00},
	{0x3107, 0xff},

	{0x3300, 0x13},
	{0x3301, 0xde},
	{0x3302, 0xef},

	{0x3308, 0xa5},
	{0x3316, 0xff},
	{0x3317, 0x00},
	{0x3312, 0x26},
	{0x3314, 0x42},
	{0x3313, 0x2b},
	{0x3315, 0x42},
	{0x3310, 0xd0},
	{0x3311, 0xbd},
	{0x330c, 0x18},
	{0x330d, 0x18},
	{0x330e, 0x56},
	{0x330f, 0x5c},
	{0x330b, 0x1c},
	{0x3306, 0x5c},
	{0x3307, 0x11},

	{0x336a, 0x52}, //052207
	{0x3370, 0x46},
	{0x3376, 0x38},

	{0x30b8, 0x20}, //10
	{0x30b9, 0x17}, //18
	{0x30ba, 0x04}, //00
	{0x30bb, 0x08}, //1f

	//Format
	{0x3100, 0x32}, //JPG
	{0x3304, 0x00},
	{0x3400, 0x02},
	{0x3404, 0x22},
	{0x3500, 0x00}, //
	{0x3610, 0x80}, //0c

	//Size QXGA
	{0x3302, 0xcf},
	{0x3088, 0x08},
	{0x3089, 0x00},
	{0x308a, 0x06},
	{0x308b, 0x00},

	{0x3507, 0x06},
	{0x350a, 0x4f},
	{0x3600, 0xc4},

	{0xffff, 0xff},
};
#if 0
static struct regval_list ov3640_fmt_rgb565[] = {
	{ REG_COM7, COM7_RGB },	/* Selects RGB mode */
	{ REG_RGB444, 0 },	/* No RGB444 please */
	{ REG_COM1, 0x0 },
	{ REG_COM15, COM15_RGB565 },
	{ REG_COM9, 0x38 }, 	/* 16x gain ceiling; 0x8 is reserved bit */
	{ 0x4f, 0xb3 }, 	/* "matrix coefficient 1" */
	{ 0x50, 0xb3 }, 	/* "matrix coefficient 2" */
	{ 0x51, 0    },		/* vb */
	{ 0x52, 0x3d }, 	/* "matrix coefficient 4" */
	{ 0x53, 0xa7 }, 	/* "matrix coefficient 5" */
	{ 0x54, 0xe4 }, 	/* "matrix coefficient 6" */
	{ REG_COM13, COM13_GAMMA|COM13_UVSAT },
	{ 0xff, 0xff },
};

static struct regval_list ov3640_fmt_rgb444[] = {
	{ REG_COM7, COM7_RGB },	/* Selects RGB mode */
	{ REG_RGB444, R444_ENABLE },	/* Enable xxxxrrrr ggggbbbb */
	{ REG_COM1, 0x40 },	/* Magic reserved bit */
	{ REG_COM15, COM15_R01FE|COM15_RGB565 }, /* Data range needed? */
	{ REG_COM9, 0x38 }, 	/* 16x gain ceiling; 0x8 is reserved bit */
	{ 0x4f, 0xb3 }, 	/* "matrix coefficient 1" */
	{ 0x50, 0xb3 }, 	/* "matrix coefficient 2" */
	{ 0x51, 0    },		/* vb */
	{ 0x52, 0x3d }, 	/* "matrix coefficient 4" */
	{ 0x53, 0xa7 }, 	/* "matrix coefficient 5" */
	{ 0x54, 0xe4 }, 	/* "matrix coefficient 6" */
	{ REG_COM13, COM13_GAMMA|COM13_UVSAT|0x2 },  /* Magic rsvd bit */
	{ 0xff, 0xff },
};

static struct regval_list ov3640_fmt_raw[] = {
	{ REG_COM7, COM7_BAYER },
	{ REG_COM13, 0x08 }, /* No gamma, magic rsvd bit */
	{ REG_COM16, 0x3d }, /* Edge enhancement, denoise */
	{ REG_REG76, 0xe1 }, /* Pix correction, magic rsvd */
	{ 0xff, 0xff },
};
#endif
